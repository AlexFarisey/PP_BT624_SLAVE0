/*
 * structures.h
 *
 *  Created on: 22 серп. 2019 р.
 *      Author: Саня
 */

#ifndef SOURCEINCLUDE_STRUCTURES_H_
#define SOURCEINCLUDE_STRUCTURES_H_
/*
{ADDR}  -1 байт, признак начала служебного кода устройства:
- устройство MASTER код 0хЕ7 или 1110 0111b (компьютер);
- устройство SLAVE0 код 0хАА или 10101010b (основное устройство отправки сообщений в изделие);
- устройство SLAVE1 код 0х55 или 01010101b(CAN парсер - принимает последовательность символов и отправляет по запросу в MASTER).
{CMD}   -1 байт, запрос на чтение данных (код 0х99 или 10011001b), запрос на запись данных (код 0х66 или 01100110b);
{SIZE}  -1 байт, количество байт передаваемых данных({данные});
{ID}        -1 байт, идентификатор пакета, может иметь любое значение неравное {ADDR}, {ETX} и {CRC} (Смотри таблицу 1);
{данные}    -необязательная часть, содержащая передаваемые данные (прилагаются в приложении);
{CRC}   -1 байт, признак начала контрольной информации (смотри ниже ЦИК);
{EXT}       -1 байт, признак конца пакета (код 0х18 или 00011000b).

Расчет ЦИК производиться для всех байт сообщения, начиная с {CMD}, {SIZE}, {ID}
и заканчивая последним байтом {данные} перед {CRC{данные}} {ETX} .
*/


struct UART {
    Uint32 SerialCommsTime:32; // Лічильник часу прийому одного символу
    Uint16 RxChar:8; // Символ який отримуємо.
    Uint16 TxChar:8; // Символ який відправляємо.
    Uint16 *RxList[0xff];
//    Uint16 *CRCList[0xff];
//    struct PACKAGE pkg; // Структура передаваємого кадру
};

struct SYSTEM {
    struct UART    uart;
};

extern volatile struct SYSTEM sys;
/*
struct PACKAGE {
    struct LABEL {
        enum ADDR{
            master = 0xE7, // - устройство MASTER код 0хЕ7 или 1110 0111b (компьютер);
            slave0 = 0xAA, // - устройство SLAVE0 код 0хАА или 10101010b (основное устройство отправки сообщений в изделие);
            slave1 = 0x55  // - устройство SLAVE1 код 0х55 или 01010101b(CAN парсер - принимает последовательность символов и отправляет по запросу в MASTER).
        }addr; // -1 байт, признак начала служебного кода устройства:
        enum CMD{
            read = 0x99, // 1 байт, запрос на чтение данных (код 0х99 или 10011001b),
            write = 0x66, // 1 байт, запрос на запись данных (код 0х66 или 01100110b);
        }cmd; // -1 байт, запрос на чтение данных (код 0х99 или 10011001b), запрос на запись данных (код 0х66 или 01100110b);
        enum EXT {
            not,
            yes = 0x18
        }exit; // -1 байт, признак конца пакета (код 0х18 или 00011000b).
        enum PASS {
            Closed,
            Open = 0x9955
        }pass; // ключ доступу на запит інформації
    }label; // Мітки
    enum FLAG {
        GetByteError, // Приймання невдале або перерване по таймоут
        GetByteOk = 0, // Приймання вдале
        AddrError, // Прапор не вдалого збереження адреси
        AddrOk, // Прапор вдалого збереження адреси
        CmdError, // Прапор не вдалого збереження команди
        CmdOk, // Прапор вдалого збереження команди
        SizeError, // Прапор вдалого збереження розміру пакету
        SizeOk, // Прапор вдалого збереження розміру пакету
        IdError, // Прапор вдалого збереження ід запиту
        IdOk, // Прапор вдалого збереження ід запиту
        DataError, //
        DataOk, //
        CrcError,
        CrcOk,
        ExtError,
        ExtOk,

        Done, // Прапор закінчення роботи
        Loading // Прапор в роботі
    }flag; // Прапори роботи УАРТ
    union ACCESS{
        Uint16 all;
        struct BITS{
            Uint16 Addr:8;  // 0 Адресат
            Uint16 Cmd:8;   // 1 Команда читання/запис
        }byte;
    }access; // Доступ на запит інформації
    Uint16 size:8; // Зчитаний 1 байт, колькості байт передаваємих даних.
    union ID{
        Uint16 all;
        struct ID_BYTE{
            Uint16 b0:8; // 0
            Uint16 b1:8; // 1
        }byte;
    }id; // Зчитаний 1 байт, іентифікатора пак
    Uint16 data:8; // Зчитаний 1 байт, даних
    union CRC{
        Uint16 all;
        struct CRC_BYTE{
            Uint16 b0:8; // 0
            Uint16 b1:8; // 1
        }byte;
    }crc; // Зчитаний 2 байт, контрольної інформації
};

struct UART {
    Uint32 SerialCommsTime:32; // Лічильник часу прийому одного символу
    Uint16 RxChar:8; // Символ який отримуємо.
    Uint16 TxChar:8; // Символ який відправляємо.
    Uint16 *RxList[0xff];
//    Uint16 *CRCList[0xff];
    struct PACKAGE pkg; // Структура передаваємого кадру
};
//------------------------------------------------------------------------------
enum IDm {
    pr1 = 0x01, // Привід 1
    pr2 = 0x10, // Привід 2

    oid = 0x11, // Привід імпульсних двигунів

    b8h = 0xb8, // GNSS прогноз RAIM
    bbh = 0xbb, // GNSS теперышне рішення
    bdh = 0xbd, // GNSS параметри RAIM для поточних координат
    bfh = 0xbf, // GNSS кількість помилок ефемеридної інформації

    bd = 0xDB,  // Блок датчиків

    id_101 = 0x101, // Can
    id_102 = 0x102, // Can
    id_103 = 0x103, // Can
    id_104 = 0x104, // Can
    id_105 = 0x105, // Can
    id_106 = 0x106, // Can
    id_120 = 0x120, // Can
    id_121 = 0x121, // Can
    id_122 = 0x122, // Can
    id_123 = 0x123, // Can
    id_124 = 0x124, // Can
    id_125 = 0x125, // Can
    id_126 = 0x126, // Can
    id_127 = 0x127, // Can
    id_128 = 0x128, // Can
    id_129 = 0x129, // Can
    id_12A = 0x12A, // Can
    id_12B = 0x12B, // Can
    id_140 = 0x140, // Can
    id_141 = 0x141  // Can
};
//------------------------------------------------------------------------------
struct CAN {

};

struct CTRL {
     struct UART    uart;
     struct CAN     can;
     enum   IDm      idm; // -2 байт, идентификатор пакета, может иметь любое значение неравное {ADDR}, {ETX} и {CRC} (Смотри таблицу 1);
     //struct eCAN_SYS  can_sys;
     //struct eCAN_MSG  can_msg;
};
*/
/*****************************************************************************/
//extern volatile struct CTRL sys;
/*****************************************************************************/
#endif /* SOURCEINCLUDE_STRUCTURES_H_ */
